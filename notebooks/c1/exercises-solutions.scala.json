{
   "paragraphs": [
      {
         "text": "%md\n## \"Word Count\" Exercises Solutions (Scala)\n**IMPORTANT**: Remember that the best way to learn is by doing. So, if you haven't yet tried to complete the exercises on your own, give them a try before looking at the following solutions.\n\nWe'll begin by loading once again the documents for further processing and reusing the `toWords` and `countWords` functions that we saw during the session:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:24+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063298_1230712565",
         "id": "20180717-203219_1843464497",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:24+0000",
         "dateFinished": "2018-08-13T20:29:24+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "focus": true,
         "$$hashKey": "object:16685"
      },
      {
         "text": "import org.apache.spark.sql.Dataset\n\ndef toWords(documents: Dataset[String], separatorsRegexp: String = \"\"\"\\s+\"\"\"): Dataset[String] = {\n    documents.flatMap(doc => doc.split(separatorsRegexp))\n        .map(word => word.toLowerCase)\n        .filter(word => !word.isEmpty)\n}",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:24+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "editorHide": false,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063299_1230327816",
         "id": "20180717-211731_1841768387",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:30+0000",
         "dateFinished": "2018-08-13T20:29:30+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16686"
      },
      {
         "text": "def countWords(documents: Dataset[String], separatorsRegexp: String = \"\"\"\\s+\"\"\") : Dataset[(String, Long)] = {\n    val words = toWords(documents, separatorsRegexp)\n    val counts = words.groupByKey(identity).count()\n    counts\n}",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:24+0000",
         "config": {
            "lineNumbers": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063299_1230327816",
         "id": "20180717-211745_1951066762",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:30+0000",
         "dateFinished": "2018-08-13T20:29:31+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16687"
      },
      {
         "text": "def loadFile(bucket_file_path: String): Dataset[String] = {\n    spark.read.textFile(bucket_file_path)\n}",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:24+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063300_1228404072",
         "id": "20180731-232114_598900552",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:30+0000",
         "dateFinished": "2018-08-13T20:29:31+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16688"
      },
      {
         "text": "val documents = loadFile(\"gs://de-training-input/words/big.txt\")\ndocuments.show()",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:24+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063300_1228404072",
         "id": "20180801-191033_464035631",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:31+0000",
         "dateFinished": "2018-08-13T20:29:42+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16689"
      },
      {
         "text": "%md \n### Can you count the number of characters in the set of documents?",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:24+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063300_1228404072",
         "id": "20180730-125350_577688281",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:24+0000",
         "dateFinished": "2018-08-13T20:29:24+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16690"
      },
      {
         "text": "%md\nThis is exactly the same problem as the example the instructor demonstrated! There\u2019s only a slight twist\u2014 rather than splitting the text into words, we need to split it into characters. Let's see how we can accomplish this by modifying the above functions:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:24+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063300_1228404072",
         "id": "20180730-125420_2063509585",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:24+0000",
         "dateFinished": "2018-08-13T20:29:24+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16691"
      },
      {
         "text": "import scala.util.matching.Regex\n\ndef toChars(\n    documents: Dataset[String], \n    pattern: Regex = \".\".r) : Dataset[String] = \n{\n    documents\n        .flatMap(doc => doc.split(\"\"))\n        .map(char => char.toLowerCase)\n        .filter(char => pattern.findFirstIn(char) != None)\n}",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:24+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063300_1228404072",
         "id": "20180730-130712_353902806",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:32+0000",
         "dateFinished": "2018-08-13T20:29:42+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16692"
      },
      {
         "text": "%md\nNotice we added a `pattern` optional parameter that can come in handy if we want to restrict the characters that we analyze.",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:25+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063300_1228404072",
         "id": "20180731-125435_1882541499",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:25+0000",
         "dateFinished": "2018-08-13T20:29:25+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16693"
      },
      {
         "text": "def countChars(\n    documents: Dataset[String],\n    pattern: Regex = \".\".r) : Dataset[(String, Long)] = \n{\n    val chars = toChars(documents, pattern=pattern)\n    val counts = chars.groupByKey(identity).count()\n    counts\n}",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:25+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063300_1228404072",
         "id": "20180730-131043_1715520435",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:42+0000",
         "dateFinished": "2018-08-13T20:29:43+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16694"
      },
      {
         "text": "%md\nLet's give these functions a try:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:25+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063300_1228404072",
         "id": "20180802-112502_1032268612",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:25+0000",
         "dateFinished": "2018-08-13T20:29:25+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16695"
      },
      {
         "text": "val chars = countChars(documents)\nchars.show()",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:25+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063301_1228019323",
         "id": "20180731-125616_1021872024",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:43+0000",
         "dateFinished": "2018-08-13T20:29:51+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16696"
      },
      {
         "text": "%md\nLet's see what happens if we pass a pattern to analyze only alphabetic characters:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:25+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063301_1228019323",
         "id": "20180731-125548_884328081",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:25+0000",
         "dateFinished": "2018-08-13T20:29:25+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16697"
      },
      {
         "text": "val alphas = countChars(documents, \"[a-zA-Z]\".r)\nalphas.show()",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:25+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063301_1228019323",
         "id": "20180730-131159_962072403",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:43+0000",
         "dateFinished": "2018-08-13T20:29:56+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16698"
      },
      {
         "text": "%md\n### Which are the top 10 longest words and how many of each are there in the dataset?",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:26+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063301_1228019323",
         "id": "20180717-211705_1316930531",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:26+0000",
         "dateFinished": "2018-08-13T20:29:26+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16699"
      },
      {
         "text": "%md\nThe solution to this exercise is very simple if you followed the example during the session, because you already had all the information you needed: words and their counts. All that was missing was to learn how to sort that information by the length of each word. Here's a possible solution:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:26+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063301_1228019323",
         "id": "20180717-211949_34443017",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:26+0000",
         "dateFinished": "2018-08-13T20:29:26+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16700"
      },
      {
         "text": "def determineLongestWords(\n    documents: Dataset[String], \n    separatorsRegexp: String = \"\"\"\\s+\"\"\"): Dataset[(Int, String, Long)] = \n{\n    val words = countWords(documents, separatorsRegexp)\n    words.map { case (word, count) => (word.size, word, count) }\n         .orderBy($\"_1\".desc)\n}",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:26+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "editorHide": false,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063301_1228019323",
         "id": "20180717-212002_1888821357",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:51+0000",
         "dateFinished": "2018-08-13T20:29:57+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16701"
      },
      {
         "text": "val punctuationRegexp = \"\"\"[\\p{Punct}\\s]\"\"\"\nval longest = determineLongestWords(documents, punctuationRegexp)\nlongest.show()",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:26+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063301_1228019323",
         "id": "20180717-212100_4676898",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:56+0000",
         "dateFinished": "2018-08-13T20:30:01+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16702"
      },
      {
         "text": "%md\nAs you can see, the solution is quite simple. Perhaps the only part that deserves an explanation is the line: `.orderBy($\"_1\".desc)`. The `$` is an operator that turns its operand (in this case `\"_1\"`) into an object of type `org.apache.spark.sql.Column`, and `\"_1\"` is just the default name that `Dataset`s give to fields when you use tuples rather than the `Row` object, as we are doing in this case.",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:26+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063302_1229173570",
         "id": "20180717-212123_154082817",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:26+0000",
         "dateFinished": "2018-08-13T20:29:26+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16703"
      },
      {
         "text": "%md\n\n### Can you find all anagrams sets with at least two words?\n\nRemember that two words are anagrams of each other if they contain the same number of occurrences of each letter.\nFor example: `areAnagrams(\"mar\", \u201cram\u201d) == true`, but `areAnagrams(\"line\", \u201cnilee\u201d) == false`\n\nConsider the following set of documents:\n\n`documents = [ \u201ccar art\u201d, \u201crat arc\u201d ]`\n\nIn this case, there are two such sets: `[\u201crat\u201d, \u201cart\u201d]` and `[\u201ccar\u201d, \u201carc\u201d]` because they contain at least two elements. \n\nNow consider the following set of documents:\n\n`documents = [ \u201cwizeline rocks\u201d, \u201cchuck norris\u201d ]`\n\nIn this case, there are no such sets.",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:26+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063302_1229173570",
         "id": "20180717-213338_1287781038",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:26+0000",
         "dateFinished": "2018-08-13T20:29:26+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16704"
      },
      {
         "text": "%md\nThis exercise is much more involved, as it requires to first think of a conceptual solution to find whether two words are anagrams of each other, and then to figure out which functions to use to achieve each intermediate step in the computation. Here's a possible solution:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:26+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063302_1229173570",
         "id": "20180717-213513_1398409936",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:27+0000",
         "dateFinished": "2018-08-13T20:29:27+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16705"
      },
      {
         "text": "def anagramSets(documents: Dataset[String], separatorsRegexp: String = \"\"\"\\s+\"\"\"): Dataset[List[String]] = {\n    val words = toWords(documents, separatorsRegexp).distinct()\n    val anagrams = words.groupByKey(word => word.sorted)\n      .mapGroups((word, anagrams) => anagrams.toList)\n      .filter(anagrams => anagrams.size > 1)\n\n    anagrams\n}",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:27+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063302_1229173570",
         "id": "20180717-213653_1753752118",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:57+0000",
         "dateFinished": "2018-08-13T20:30:02+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16706"
      },
      {
         "text": "val anagrams = anagramSets(documents, punctuationRegexp)\nanagrams.show()",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:27+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063302_1229173570",
         "id": "20180717-214241_1649052576",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:30:02+0000",
         "dateFinished": "2018-08-13T20:30:09+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16707"
      },
      {
         "text": "%md\nLet's break it down line by line. The first line: `val words = toWords(documents, separatorsRegexp).distinct()` just gives you back a list of unique words. Simple enough!",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:27+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063302_1229173570",
         "id": "20180717-213748_1295804378",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:27+0000",
         "dateFinished": "2018-08-13T20:29:27+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16708"
      },
      {
         "text": "%md\nThe second line: `val anagrams = words.groupByKey(word => word.sorted)` groups words as anagrams by proposing a way to figure out whether two words are anagrams of each other\u2014 simply sort their characters and compare the resulting strings!",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:27+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063302_1229173570",
         "id": "20180717-213852_521170903",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:27+0000",
         "dateFinished": "2018-08-13T20:29:27+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16709"
      },
      {
         "text": "%md\nIn the third line: `.mapGroups((word, anagrams) => anagrams.toList)` we discard the keys of the previous grouping, because we don't really need them anymore. All we care about is the list of values for each group, which happens to be an \"iterable\", hence the need to call `.toList`",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:27+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063303_1228788821",
         "id": "20180717-213951_1951649187",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:27+0000",
         "dateFinished": "2018-08-13T20:29:27+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16710"
      },
      {
         "text": "%md\nFinally, in the last line: `.filter(lambda anagrams: anagrams.size > 1)` we remove the trivial groups\u2014 those that contain just one element.",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:27+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192063303_1228788821",
         "id": "20180717-214112_288924767",
         "dateCreated": "2018-08-13T20:27:43+0000",
         "dateStarted": "2018-08-13T20:29:27+0000",
         "dateFinished": "2018-08-13T20:29:27+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16711"
      },
      {
         "text": "%md\n",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:27+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192167671_1251073608",
         "id": "20180813-202927_1177339400",
         "dateCreated": "2018-08-13T20:29:27+0000",
         "status": "READY",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:16712"
      }
   ],
   "name": "wordcount-scala-exercises-solutions",
   "id": "2DNXFDZ5T",
   "angularObjects": {
      "2DM1XB9DA:shared_process": [],
      "2DPKGH9NF:shared_process": [],
      "2DMW4PJTM:shared_process": [],
      "2DMYE3FW7:shared_process": [],
      "2DN1W9AMT:shared_process": [],
      "2DQA5JUQU:shared_process": [],
      "2DQ484HW1:shared_process": [],
      "2DQ7K4ARC:shared_process": [],
      "2DPJXA53H:shared_process": [],
      "2DMW7H2N2:shared_process": [],
      "2DMPWH2X1:shared_process": [],
      "2DQBTHYT6:shared_process": [],
      "2DQ4JJTWR:shared_process": [],
      "2DQ575U25:shared_process": [],
      "2DM4BTG1Z:shared_process": [],
      "2DPZKUETW:shared_process": [],
      "2DNYW9WR3:shared_process": [],
      "2DQ9UQYP2:shared_process": []
   },
   "config": {
      "looknfeel": "default",
      "personalizedMode": "false"
   },
   "info": {}
}
