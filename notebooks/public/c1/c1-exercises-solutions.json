{
   "paragraphs": [
      {
         "text": "%md\n## C1 Exercises Solutions\n**IMPORTANT**: Remember that the best way to learn is by doing. So, if you haven't yet tried to complete the exercises on your own, give them a try before looking at the following solutions.\n\nWe'll begin by loading once again the documents for further processing and reusing the `toWords` and `countWords` functions that we saw during the session:",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:21:51+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<h2>C1 Exercises Solutions</h2>\n<p><strong>IMPORTANT</strong>: Remember that the best way to learn is by doing. So, if you haven&rsquo;t yet tried to complete the exercises on your own, give them a try before looking at the following solutions.</p>\n<p>We&rsquo;ll begin by loading once again the documents for further processing and reusing the <code>toWords</code> and <code>countWords</code> functions that we saw during the session:</p>\n</div>"
               }
            ]
         },
         "apps": [],
         "jobName": "paragraph_1536609489608_-542978916",
         "id": "20180717-203219_1843464497",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:21:51+0000",
         "dateFinished": "2018-09-11T15:21:51+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "focus": true,
         "$$hashKey": "object:12914"
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:21:53+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">\n</div>"
               }
            ]
         },
         "apps": [],
         "jobName": "paragraph_1536609560440_-1881596960",
         "id": "20180910-195920_1851813486",
         "dateCreated": "2018-09-10T19:59:20+0000",
         "dateStarted": "2018-09-11T15:21:53+0000",
         "dateFinished": "2018-09-11T15:21:53+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12915"
      },
      {
         "text": "import org.apache.spark.sql.Dataset\n\ndef toWords(documents: Dataset[String], separatorsRegexp: String = \"\"\"\\s+\"\"\"): Dataset[String] = {\n    documents.flatMap(doc => doc.split(separatorsRegexp))\n        .map(word => word.toLowerCase)\n        .filter(word => !word.isEmpty)\n}",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T19:59:53+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "editorHide": false,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489610_-542209418",
         "id": "20180717-211731_1841768387",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-10T19:59:53+0000",
         "dateFinished": "2018-09-10T19:59:53+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12916"
      },
      {
         "text": "def countWords(documents: Dataset[String], separatorsRegexp: String = \"\"\"\\s+\"\"\") : Dataset[(String, Long)] = {\n    val words = toWords(documents, separatorsRegexp)\n    val counts = words.groupByKey(identity).count()\n    counts\n}",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T19:59:55+0000",
         "config": {
            "lineNumbers": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489610_-542209418",
         "id": "20180717-211745_1951066762",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-10T19:59:55+0000",
         "dateFinished": "2018-09-10T19:59:56+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12917"
      },
      {
         "text": "val documents = spark.read.textFile(\"gs://de-training-input/words/big.txt\")\ndocuments.show()",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T19:59:58+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489611_-542594167",
         "id": "20180801-191033_464035631",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-10T19:59:58+0000",
         "dateFinished": "2018-09-10T20:00:02+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12918"
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:21:56+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/scala",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">\n</div>"
               }
            ]
         },
         "apps": [],
         "jobName": "paragraph_1536609612944_-1849216756",
         "id": "20180910-200012_1145765891",
         "dateCreated": "2018-09-10T20:00:12+0000",
         "dateStarted": "2018-09-11T15:21:56+0000",
         "dateFinished": "2018-09-11T15:21:56+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12919"
      },
      {
         "text": "%pyspark\nfrom pyspark.sql.functions import split, explode, col, lower\n\ndef to_words(documents, separators_regexp=r'\\s+'):\n    words = (documents\n        .select(explode(split(documents.value, separators_regexp)).alias('word'))\n        .select(lower(col('word')).alias('word'))\n        .where(col('word') != ''))\n    return words",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:00:47+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609625667_1769593481",
         "id": "20180910-200025_918830431",
         "dateCreated": "2018-09-10T20:00:25+0000",
         "dateStarted": "2018-09-10T20:00:47+0000",
         "dateFinished": "2018-09-10T20:00:47+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12920"
      },
      {
         "text": "%pyspark\ndef count_words(documents, separators_regexp=r'\\s+'):\n    words = to_words(documents, separators_regexp)\n    counts = words.groupBy(\"word\").count()\n    return counts",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:01:08+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python"
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609650157_1230975669",
         "id": "20180910-200050_200420980",
         "dateCreated": "2018-09-10T20:00:50+0000",
         "dateStarted": "2018-09-10T20:01:08+0000",
         "dateFinished": "2018-09-10T20:01:08+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12921"
      },
      {
         "text": "%pyspark\ndocuments = spark.read.text(\"gs://de-training-input/words/big.txt\")\ndocuments.show()",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:01:27+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python"
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609673201_1399895760",
         "id": "20180910-200113_705999967",
         "dateCreated": "2018-09-10T20:01:13+0000",
         "dateStarted": "2018-09-10T20:01:27+0000",
         "dateFinished": "2018-09-10T20:01:28+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12922"
      },
      {
         "text": "%md \n### Can you count the number of characters in the set of documents?",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:29+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489612_-544517912",
         "id": "20180730-125350_577688281",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:22:29+0000",
         "dateFinished": "2018-09-11T15:22:29+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12923",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<h3>Can you count the number of characters in the set of documents?</h3>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md\nThis is exactly the same problem as the example the instructor demonstrated! There\u2019s only a slight twist\u2014 rather than splitting the text into words, we need to split it into characters. Let's see how we can accomplish this by modifying the above functions:",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:31+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489612_-544517912",
         "id": "20180730-125420_2063509585",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:22:31+0000",
         "dateFinished": "2018-09-11T15:22:31+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12924",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>This is exactly the same problem as the example the instructor demonstrated! There\u2019s only a slight twist\u2014 rather than splitting the text into words, we need to split it into characters. Let&rsquo;s see how we can accomplish this by modifying the above functions:</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:33+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609717529_1459424570",
         "id": "20180910-200157_1828341722",
         "dateCreated": "2018-09-10T20:01:57+0000",
         "dateStarted": "2018-09-11T15:22:33+0000",
         "dateFinished": "2018-09-11T15:22:33+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12925",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "import scala.util.matching.Regex\n\ndef toChars(\n    documents: Dataset[String], \n    pattern: Regex = \".\".r) : Dataset[String] = \n{\n    documents\n        .flatMap(doc => doc.split(\"\"))\n        .map(char => char.toLowerCase)\n        .filter(char => pattern.findFirstIn(char) != None)\n}",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:04:57+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489612_-544517912",
         "id": "20180730-130712_353902806",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-10T20:04:57+0000",
         "dateFinished": "2018-09-10T20:04:58+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12926"
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:35+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609834323_-1025162877",
         "id": "20180910-200354_1837053363",
         "dateCreated": "2018-09-10T20:03:54+0000",
         "dateStarted": "2018-09-11T15:22:35+0000",
         "dateFinished": "2018-09-11T15:22:35+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12927",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "%pyspark\ndef to_chars(documents, pattern=r'.'):\n    chars = (\n        documents\n        .select(explode(split(documents.value, '')).alias('char'))\n        .select(lower(col('char')).alias('char'))\n        .where(col('char').rlike(pattern))\n    )\n    return chars",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:04:17+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python"
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609850048_1402248582",
         "id": "20180910-200410_1271137061",
         "dateCreated": "2018-09-10T20:04:10+0000",
         "dateStarted": "2018-09-10T20:04:17+0000",
         "dateFinished": "2018-09-10T20:04:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12928"
      },
      {
         "text": "%md\nNotice we added a `pattern` optional parameter that can come in handy if we want to restrict the characters that we analyze.",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:38+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489613_-544902661",
         "id": "20180731-125435_1882541499",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:22:38+0000",
         "dateFinished": "2018-09-11T15:22:38+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12929",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>Notice we added a <code>pattern</code> optional parameter that can come in handy if we want to restrict the characters that we analyze.</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:41+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609864361_-1385626624",
         "id": "20180910-200424_1336668450",
         "dateCreated": "2018-09-10T20:04:24+0000",
         "dateStarted": "2018-09-11T15:22:41+0000",
         "dateFinished": "2018-09-11T15:22:41+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12930",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "def countChars(\n    documents: Dataset[String],\n    pattern: Regex = \".\".r) : Dataset[(String, Long)] = \n{\n    val chars = toChars(documents, pattern=pattern)\n    val counts = chars.groupByKey(identity).count()\n    counts\n}",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:04:59+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489613_-544902661",
         "id": "20180730-131043_1715520435",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-10T20:05:00+0000",
         "dateFinished": "2018-09-10T20:05:00+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12931"
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:43+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609903874_-1994037229",
         "id": "20180910-200503_1867780973",
         "dateCreated": "2018-09-10T20:05:03+0000",
         "dateStarted": "2018-09-11T15:22:43+0000",
         "dateFinished": "2018-09-11T15:22:43+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12932",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "%pyspark\ndef count_chars(documents, pattern=r'.'):\n    chars = to_chars(documents, pattern=pattern)\n    counts = chars.groupBy(\"char\").count()\n    return counts",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:05:15+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609911047_-458873793",
         "id": "20180910-200511_819669961",
         "dateCreated": "2018-09-10T20:05:11+0000",
         "dateStarted": "2018-09-10T20:05:15+0000",
         "dateFinished": "2018-09-10T20:05:15+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12933"
      },
      {
         "text": "%md\nLet's give these functions a try:",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:46+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489613_-544902661",
         "id": "20180802-112502_1032268612",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:22:46+0000",
         "dateFinished": "2018-09-11T15:22:46+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12934",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>Let&rsquo;s give these functions a try:</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:50+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609934934_-811288462",
         "id": "20180910-200534_63870627",
         "dateCreated": "2018-09-10T20:05:34+0000",
         "dateStarted": "2018-09-11T15:22:50+0000",
         "dateFinished": "2018-09-11T15:22:50+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12935",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "val chars = countChars(documents)\nchars.show()",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:05:43+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489614_-543748414",
         "id": "20180731-125616_1021872024",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-10T20:05:43+0000",
         "dateFinished": "2018-09-10T20:06:03+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12936"
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:52+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609960800_762211946",
         "id": "20180910-200600_2085169240",
         "dateCreated": "2018-09-10T20:06:00+0000",
         "dateStarted": "2018-09-11T15:22:52+0000",
         "dateFinished": "2018-09-11T15:22:52+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12937",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "%pyspark\nchars = count_chars(documents)\nchars.show()",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:06:17+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python"
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609971634_-1717879464",
         "id": "20180910-200611_764975520",
         "dateCreated": "2018-09-10T20:06:11+0000",
         "dateStarted": "2018-09-10T20:06:17+0000",
         "dateFinished": "2018-09-10T20:06:24+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12938"
      },
      {
         "text": "%md\nLet's see what happens if we pass a pattern to analyze only alphabetic characters:",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:56+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489614_-543748414",
         "id": "20180731-125548_884328081",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:22:56+0000",
         "dateFinished": "2018-09-11T15:22:56+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12939",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>Let&rsquo;s see what happens if we pass a pattern to analyze only alphabetic characters:</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:22:57+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609991589_-1962564440",
         "id": "20180910-200631_279352072",
         "dateCreated": "2018-09-10T20:06:31+0000",
         "dateStarted": "2018-09-11T15:22:57+0000",
         "dateFinished": "2018-09-11T15:22:57+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12940",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "val alphas = countChars(documents, \"[a-zA-Z]\".r)\nalphas.show()",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:06:58+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489615_-544133163",
         "id": "20180730-131159_962072403",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-10T20:06:58+0000",
         "dateFinished": "2018-09-10T20:07:04+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12941"
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:00+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610015673_702788761",
         "id": "20180910-200655_837121610",
         "dateCreated": "2018-09-10T20:06:55+0000",
         "dateStarted": "2018-09-11T15:23:00+0000",
         "dateFinished": "2018-09-11T15:23:00+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12942",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "%pyspark\nalphas = count_chars(documents, pattern=r'[a-zA-Z]')\nalphas.show()",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:06:50+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python"
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610003500_-1402724142",
         "id": "20180910-200643_997050633",
         "dateCreated": "2018-09-10T20:06:43+0000",
         "dateStarted": "2018-09-10T20:06:50+0000",
         "dateFinished": "2018-09-10T20:06:56+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12943"
      },
      {
         "text": "%md\n### Which are the top 10 longest words and how many of each are there in the dataset?",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:02+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489615_-544133163",
         "id": "20180717-211705_1316930531",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:02+0000",
         "dateFinished": "2018-09-11T15:23:02+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12944",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<h3>Which are the top 10 longest words and how many of each are there in the dataset?</h3>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md\nThe solution to this exercise is very simple if you followed the example during the session, because you already had all the information you needed: words and their counts. All that was missing was to learn how to sort that information by the length of each word. Here's a possible solution:",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:05+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489615_-544133163",
         "id": "20180717-211949_34443017",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:05+0000",
         "dateFinished": "2018-09-11T15:23:05+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12945",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>The solution to this exercise is very simple if you followed the example during the session, because you already had all the information you needed: words and their counts. All that was missing was to learn how to sort that information by the length of each word. Here&rsquo;s a possible solution:</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:06+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610065170_-1258215086",
         "id": "20180910-200745_697157624",
         "dateCreated": "2018-09-10T20:07:45+0000",
         "dateStarted": "2018-09-11T15:23:06+0000",
         "dateFinished": "2018-09-11T15:23:06+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12946",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "def determineLongestWords(\n    documents: Dataset[String], \n    separatorsRegexp: String = \"\"\"\\s+\"\"\"): Dataset[(Int, String, Long)] = \n{\n    val words = countWords(documents, separatorsRegexp)\n    words.map { case (word, count) => (word.size, word, count) }\n         .orderBy($\"_1\".desc)\n}",
         "dateUpdated": "2018-09-10T19:58:09+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "editorHide": false,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489616_-533744942",
         "id": "20180717-212002_1888821357",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "status": "READY",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12947"
      },
      {
         "text": "val punctuationRegexp = \"\"\"[\\p{Punct}\\s]\"\"\"\nval longest = determineLongestWords(documents, punctuationRegexp)\nlongest.show()",
         "dateUpdated": "2018-09-10T19:58:09+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489616_-533744942",
         "id": "20180717-212100_4676898",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "status": "READY",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12948"
      },
      {
         "text": "%md\nAs you can see, the solution is quite simple. Perhaps the only part that deserves an explanation is the line: `.orderBy($\"_1\".desc)`. The `$` is an operator that turns its operand (in this case `\"_1\"`) into an object of type `org.apache.spark.sql.Column`, and `\"_1\"` is just the default name that `Dataset`s give to fields when you use tuples rather than the `Row` object, as we are doing in this case.",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:10+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489618_-532975445",
         "id": "20180717-212123_154082817",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:10+0000",
         "dateFinished": "2018-09-11T15:23:10+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12949",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>As you can see, the solution is quite simple. Perhaps the only part that deserves an explanation is the line: <code>.orderBy($&quot;_1&quot;.desc)</code>. The <code>$</code> is an operator that turns its operand (in this case <code>&quot;_1&quot;</code>) into an object of type <code>org.apache.spark.sql.Column</code>, and <code>&quot;_1&quot;</code> is just the default name that <code>Dataset</code>s give to fields when you use tuples rather than the <code>Row</code> object, as we are doing in this case.</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:12+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610115493_-170252466",
         "id": "20180910-200835_1392864167",
         "dateCreated": "2018-09-10T20:08:35+0000",
         "dateStarted": "2018-09-11T15:23:12+0000",
         "dateFinished": "2018-09-11T15:23:12+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12950",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "%pyspark\nfrom pyspark.sql.functions import length\n\ndef determine_longest_words(documents, separators_regexp=r'\\s+'):\n    counts = count_words(documents, separators_regexp)\n    word_stats = counts.withColumn('length', length(counts['word']))\n    return word_stats.orderBy(\"length\", ascending=False)",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:08:52+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python"
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610126120_1080596857",
         "id": "20180910-200846_2053534428",
         "dateCreated": "2018-09-10T20:08:46+0000",
         "dateStarted": "2018-09-10T20:08:52+0000",
         "dateFinished": "2018-09-10T20:08:52+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12951"
      },
      {
         "text": "%pyspark\nlongest = determine_longest_words(documents, separators_regexp=r'\\_?\\W+\\_?')\nlongest.show()",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:09:03+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python"
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610138356_-561511449",
         "id": "20180910-200858_1137328266",
         "dateCreated": "2018-09-10T20:08:58+0000",
         "dateStarted": "2018-09-10T20:09:03+0000",
         "dateFinished": "2018-09-10T20:09:07+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12952"
      },
      {
         "text": "%md\nAs you can probably guess by looking at the function above, the `withColumn` method on `Dataframe`s returns a new `Dataframe` with an additional column constructed as specified by the second argument. Something interesting to notice is that the expression we're using to build this new column is an invocation to what is called a \"vectorized\" function, -- a function that works not on individual scalar values, but rather on the whole column all at once.",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:15+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610150713_-889086005",
         "id": "20180910-200910_1994670399",
         "dateCreated": "2018-09-10T20:09:10+0000",
         "dateStarted": "2018-09-11T15:23:15+0000",
         "dateFinished": "2018-09-11T15:23:15+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12953",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>As you can probably guess by looking at the function above, the <code>withColumn</code> method on <code>Dataframe</code>s returns a new <code>Dataframe</code> with an additional column constructed as specified by the second argument. Something interesting to notice is that the expression we&rsquo;re using to build this new column is an invocation to what is called a &ldquo;vectorized&rdquo; function, &ndash; a function that works not on individual scalar values, but rather on the whole column all at once.</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md\n\n### Can you find all anagrams sets with at least two words?\n\nRemember that two words are anagrams of each other if they contain the same number of occurrences of each letter.\nFor example: `areAnagrams(\"mar\", \u201cram\u201d) == true`, but `areAnagrams(\"line\", \u201cnilee\u201d) == false`\n\nConsider the following set of documents:\n\n`documents = [ \u201ccar art\u201d, \u201crat arc\u201d ]`\n\nIn this case, there are two such sets: `[\u201crat\u201d, \u201cart\u201d]` and `[\u201ccar\u201d, \u201carc\u201d]` because they contain at least two elements. \n\nNow consider the following set of documents:\n\n`documents = [ \u201cwizeline rocks\u201d, \u201cchuck norris\u201d ]`\n\nIn this case, there are no such sets.",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:18+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489618_-532975445",
         "id": "20180717-213338_1287781038",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:18+0000",
         "dateFinished": "2018-09-11T15:23:18+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12954",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<h3>Can you find all anagrams sets with at least two words?</h3>\n<p>Remember that two words are anagrams of each other if they contain the same number of occurrences of each letter.<br/>For example: <code>areAnagrams(&quot;mar&quot;, \u201cram\u201d) == true</code>, but <code>areAnagrams(&quot;line&quot;, \u201cnilee\u201d) == false</code></p>\n<p>Consider the following set of documents:</p>\n<p><code>documents = [ \u201ccar art\u201d, \u201crat arc\u201d ]</code></p>\n<p>In this case, there are two such sets: <code>[\u201crat\u201d, \u201cart\u201d]</code> and <code>[\u201ccar\u201d, \u201carc\u201d]</code> because they contain at least two elements. </p>\n<p>Now consider the following set of documents:</p>\n<p><code>documents = [ \u201cwizeline rocks\u201d, \u201cchuck norris\u201d ]</code></p>\n<p>In this case, there are no such sets.</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md\nThis exercise is much more involved, as it requires to first think of a conceptual solution to find whether two words are anagrams of each other, and then to figure out which functions to use to achieve each intermediate step in the computation. Here's a possible solution:",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:21+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489619_-533360194",
         "id": "20180717-213513_1398409936",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:21+0000",
         "dateFinished": "2018-09-11T15:23:21+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12955",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>This exercise is much more involved, as it requires to first think of a conceptual solution to find whether two words are anagrams of each other, and then to figure out which functions to use to achieve each intermediate step in the computation. Here&rsquo;s a possible solution:</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:23+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown",
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610206734_433204020",
         "id": "20180910-201006_1269002839",
         "dateCreated": "2018-09-10T20:10:06+0000",
         "dateStarted": "2018-09-11T15:23:23+0000",
         "dateFinished": "2018-09-11T15:23:24+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12956",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/nRs6Nz/scala.png\" alt=\"Scala\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "def anagramSets(documents: Dataset[String], separatorsRegexp: String = \"\"\"\\s+\"\"\"): Dataset[List[String]] = {\n    val words = toWords(documents, separatorsRegexp).distinct()\n    val anagrams = words.groupByKey(word => word.sorted)\n      .mapGroups((word, anagrams) => anagrams.toList)\n      .filter(anagrams => anagrams.size > 1)\n\n    anagrams\n}",
         "dateUpdated": "2018-09-10T19:58:09+0000",
         "config": {
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489619_-533360194",
         "id": "20180717-213653_1753752118",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "status": "READY",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12957"
      },
      {
         "text": "val anagrams = anagramSets(documents, punctuationRegexp)\nanagrams.show()",
         "dateUpdated": "2018-09-10T19:58:09+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "scala",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/scala",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489620_-535283938",
         "id": "20180717-214241_1649052576",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "status": "READY",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12958"
      },
      {
         "text": "%md\nLet's break it down line by line. The first line: `val words = toWords(documents, separatorsRegexp).distinct()` just gives you back a list of unique words. Simple enough!",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:26+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489620_-535283938",
         "id": "20180717-213748_1295804378",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:26+0000",
         "dateFinished": "2018-09-11T15:23:26+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12959",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>Let&rsquo;s break it down line by line. The first line: <code>val words = toWords(documents, separatorsRegexp).distinct()</code> just gives you back a list of unique words. Simple enough!</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md\nThe second line: `val anagrams = words.groupByKey(word => word.sorted)` groups words as anagrams by proposing a way to figure out whether two words are anagrams of each other\u2014 simply sort their characters and compare the resulting strings!",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:28+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489621_-535668687",
         "id": "20180717-213852_521170903",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:28+0000",
         "dateFinished": "2018-09-11T15:23:28+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12960",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>The second line: <code>val anagrams = words.groupByKey(word =&gt; word.sorted)</code> groups words as anagrams by proposing a way to figure out whether two words are anagrams of each other\u2014 simply sort their characters and compare the resulting strings!</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md\nIn the third line: `.mapGroups((word, anagrams) => anagrams.toList)` we discard the keys of the previous grouping, because we don't really need them anymore. All we care about is the list of values for each group, which happens to be an \"iterable\", hence the need to call `.toList`",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:31+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489621_-535668687",
         "id": "20180717-213951_1951649187",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:31+0000",
         "dateFinished": "2018-09-11T15:23:31+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12961",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>In the third line: <code>.mapGroups((word, anagrams) =&gt; anagrams.toList)</code> we discard the keys of the previous grouping, because we don&rsquo;t really need them anymore. All we care about is the list of values for each group, which happens to be an &ldquo;iterable&rdquo;, hence the need to call <code>.toList</code></p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md\nFinally, in the last line: `.filter(lambda anagrams: anagrams.size > 1)` we remove the trivial groups\u2014 those that contain just one element.",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:33+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489621_-535668687",
         "id": "20180717-214112_288924767",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:33+0000",
         "dateFinished": "2018-09-11T15:23:33+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12962",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<p>Finally, in the last line: <code>.filter(lambda anagrams: anagrams.size &gt; 1)</code> we remove the trivial groups\u2014 those that contain just one element.</p>\n</div>"
               }
            ]
         }
      },
      {
         "text": "%md <img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">",
         "user": "anonymous",
         "dateUpdated": "2018-09-11T15:23:36+0000",
         "config": {
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "results": {},
            "enabled": true,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorHide": true,
            "tableHide": false
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536609489622_-534514440",
         "id": "20180813-202927_1177339400",
         "dateCreated": "2018-09-10T19:58:09+0000",
         "dateStarted": "2018-09-11T15:23:36+0000",
         "dateFinished": "2018-09-11T15:23:36+0000",
         "status": "FINISHED",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12963",
         "results": {
            "code": "SUCCESS",
            "msg": [
               {
                  "type": "HTML",
                  "data": "<div class=\"markdown-body\">\n<img src=\"https://image.ibb.co/k8qhvK/python.png\" alt=\"Python\">\n</div>"
               }
            ]
         }
      },
      {
         "text": "%pyspark\n\ndef anagram_sets(documents, separators_regexp=r'\\s+'):\n    words = to_words(documents, separators_regexp).distinct()\n    anagrams = words.rdd.groupBy(lambda row: tuple(sorted(row.word))) \\\n        .values().map(list) \\\n        .filter(lambda anagrams: len(anagrams) > 1)\n    return anagrams",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:11:22+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python"
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610271395_457686743",
         "id": "20180910-201111_679274274",
         "dateCreated": "2018-09-10T20:11:11+0000",
         "dateStarted": "2018-09-10T20:11:22+0000",
         "dateFinished": "2018-09-10T20:11:22+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12964"
      },
      {
         "text": "%pyspark\nanagrams = anagram_sets(documents, separators_regexp='\\_?\\W+\\_?')\nanagrams.take(10)",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:11:31+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "python"
            },
            "editorMode": "ace/mode/python"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610282419_-1998550235",
         "id": "20180910-201122_1036474567",
         "dateCreated": "2018-09-10T20:11:22+0000",
         "dateStarted": "2018-09-10T20:11:31+0000",
         "dateFinished": "2018-09-10T20:12:07+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12965"
      },
      {
         "text": "%md\n",
         "user": "anonymous",
         "dateUpdated": "2018-09-10T20:12:43+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1536610363436_-229151341",
         "id": "20180910-201243_2113302316",
         "dateCreated": "2018-09-10T20:12:43+0000",
         "status": "READY",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:12970"
      }
   ],
   "name": "c1-exercises-solutions",
   "id": "2DPVE8JC2",
   "angularObjects": {
      "2DQ9EDMWJ:shared_process": [],
      "2DRNBQQAQ:shared_process": [],
      "2DS86GKDE:shared_process": [],
      "2DRFJKZS4:shared_process": [],
      "2DS5V8M44:shared_process": [],
      "2DP73WA8E:shared_process": [],
      "2DRKA6B15:shared_process": [],
      "2DP9F3RJD:shared_process": [],
      "2DRXXJ6SB:shared_process": [],
      "2DRDPZV2W:shared_process": [],
      "2DQ7XQ6PM:shared_process": [],
      "2DSMJR9YW:shared_process": [],
      "2DQUCR39Z:shared_process": [],
      "2DS3DWX2D:shared_process": [],
      "2DSYPPZAP:shared_process": [],
      "2DSM8AVPF:shared_process": [],
      "2DPXRW1XQ:shared_process": [],
      "2DR32RZ8C:shared_process": []
   },
   "config": {
      "looknfeel": "default",
      "personalizedMode": "false"
   },
   "info": {}
}
