{
   "paragraphs": [
      {
         "text": "%md\n## \"Word Count\" Exercises Solutions (PySpark)\n**IMPORTANT**: Remember that the best way to learn is by doing. So, if you haven't yet tried to complete the exercises on your own, give them a try before looking at the following solutions.\n\nWe'll begin by loading once again the documents for further processing and reusing the `toWords` and `countWords` functions that we saw during the session:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049334_612959073",
         "id": "20180717-203836_1864110548",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:16+0000",
         "dateFinished": "2018-08-13T20:29:16+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "focus": true,
         "$$hashKey": "object:20033"
      },
      {
         "text": "%pyspark\nfrom pyspark.sql.functions import split, explode, col, lower\n\ndef to_words(documents, separators_regexp=r'\\s+'):\n    words = (documents\n        .select(explode(split(documents.value, separators_regexp)).alias('word'))\n        .select(lower(col('word')).alias('word'))\n        .where(col('word') != ''))\n    return words",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049335_612574324",
         "id": "20180717-204348_1084183229",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:16+0000",
         "dateFinished": "2018-08-13T20:29:16+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20034"
      },
      {
         "text": "%pyspark\ndef count_words(documents, separators_regexp=r'\\s+'):\n    words = to_words(documents, separators_regexp)\n    counts = words.groupBy(\"word\").count()\n    return counts",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049335_612574324",
         "id": "20180717-204246_1526665935",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:16+0000",
         "dateFinished": "2018-08-13T20:29:16+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20035"
      },
      {
         "text": "%pyspark\ndocuments = sqlContext.read.text(\"gs://de-training-input/words/big.txt\")\ndocuments.show()",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049335_612574324",
         "id": "20180801-191544_1437593776",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:16+0000",
         "dateFinished": "2018-08-13T20:29:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20036"
      },
      {
         "text": "%md\n### Can you count the number of characters in the set of documents?",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049335_612574324",
         "id": "20180731-120654_421946737",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:16+0000",
         "dateFinished": "2018-08-13T20:29:16+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20037"
      },
      {
         "text": "%md\nThis is exactly the same problem as the example the instructor demonstrated! There\u2019s only a slight twist\u2014 rather than splitting the text into words, we need to split it into characters. Let's see how we can accomplish this by modifying the above functions:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049335_612574324",
         "id": "20180731-120820_2145672945",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:16+0000",
         "dateFinished": "2018-08-13T20:29:16+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20038"
      },
      {
         "text": "%pyspark\ndef to_chars(documents, pattern=r'.'):\n    chars = (\n        documents\n        .select(explode(split(documents.value, '')).alias('char'))\n        .select(lower(col('char')).alias('char'))\n        .where(col('char').rlike(pattern))\n    )\n    return chars",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "editorHide": false,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049336_610650580",
         "id": "20180731-122059_1223178467",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:16+0000",
         "dateFinished": "2018-08-13T20:29:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20039"
      },
      {
         "text": "%md\nNotice we added a `pattern` optional parameter that can come in handy if we want to restrict the characters that we analyze.",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049336_610650580",
         "id": "20180731-123035_1116141343",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:16+0000",
         "dateFinished": "2018-08-13T20:29:16+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20040"
      },
      {
         "text": "%pyspark\ndef count_chars(documents, pattern=r'.'):\n    chars = to_chars(documents, pattern=pattern)\n    counts = chars.groupBy(\"char\").count()\n    return counts",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049336_610650580",
         "id": "20180731-122755_1332441437",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:17+0000",
         "dateFinished": "2018-08-13T20:29:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20041"
      },
      {
         "text": "%md\nLet's give these functions a try:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049336_610650580",
         "id": "20180731-225055_649861773",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:16+0000",
         "dateFinished": "2018-08-13T20:29:16+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20042"
      },
      {
         "text": "%pyspark\nchars = count_chars(documents)\nchars.show()",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:16+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049336_610650580",
         "id": "20180731-121808_1178163107",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:17+0000",
         "dateFinished": "2018-08-13T20:29:21+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20043"
      },
      {
         "text": "%md\nLet's see what happens if we pass a pattern to analyze only alphabetic characters:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049337_610265831",
         "id": "20180802-112524_1955139589",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:17+0000",
         "dateFinished": "2018-08-13T20:29:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20044"
      },
      {
         "text": "%pyspark\nalphas = count_chars(documents, pattern=r'[a-zA-Z]')\nalphas.show()",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049337_610265831",
         "id": "20180731-123400_1738988173",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:17+0000",
         "dateFinished": "2018-08-13T20:29:25+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20045"
      },
      {
         "text": "%md\n### Which are the top 10 longest words and how many of each are there in the dataset?",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049337_610265831",
         "id": "20180717-203409_643183981",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:17+0000",
         "dateFinished": "2018-08-13T20:29:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20046"
      },
      {
         "text": "%md\nThe solution to this exercise is very simple if you followed the example during the session, because you already had all the information you needed: words and their counts. All that was missing was to learn how to sort that information by the length of each word. Here's a possible solution:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049337_610265831",
         "id": "20180717-203515_888976772",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:17+0000",
         "dateFinished": "2018-08-13T20:29:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20047"
      },
      {
         "text": "%pyspark\nfrom pyspark.sql.functions import length\n\ndef determine_longest_words(documents, separators_regexp=r'\\s+'):\n    counts = count_words(documents, separators_regexp)\n    word_stats = counts.withColumn('length', length(counts['word']))\n    return word_stats.orderBy(\"length\", ascending=False)",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049338_611420078",
         "id": "20180717-204024_103052485",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:22+0000",
         "dateFinished": "2018-08-13T20:29:25+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20048"
      },
      {
         "text": "%pyspark\nlongest = determine_longest_words(documents, separators_regexp=r'\\_?\\W+\\_?')\nlongest.show()",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049338_611420078",
         "id": "20180717-204053_182287988",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:26+0000",
         "dateFinished": "2018-08-13T20:29:29+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20049"
      },
      {
         "text": "%md\nAs you can probably guess by looking at the function above, the `withColumn` method on `Dataframe`s returns a new `Dataframe` with an additional column constructed as specified by the second argument. Something interesting to notice is that the expression we're using to build this new column is an invocation to what is called a \"vectorized\" function, -- a function that works not on individual scalar values, but rather on the whole column all at once.",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049338_611420078",
         "id": "20180717-205357_44291979",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:17+0000",
         "dateFinished": "2018-08-13T20:29:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20050"
      },
      {
         "text": "%md\n### Can you find all anagrams sets with at least two words?\n\nRemember that two words are anagrams of each other if they contain the same number of occurrences of each letter.\nFor example: `areAnagrams(\"mar\", \u201cram\u201d) == true`, but `areAnagrams(\"line\", \u201cnilee\u201d) == false`\n\nConsider the following set of documents:\n\n`documents = [ \u201ccar art\u201d, \u201crat arc\u201d ]`\n\nIn this case, there are two such sets: `[\u201crat\u201d, \u201cart\u201d]` and `[\u201ccar\u201d, \u201carc\u201d]` because they contain at least two elements. \n\nNow consider the following set of documents:\n\n`documents = [ \u201cwizeline rocks\u201d, \u201cchuck norris\u201d ]`\n\nIn this case, there are no such sets.",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049338_611420078",
         "id": "20180717-204142_2055449237",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:17+0000",
         "dateFinished": "2018-08-13T20:29:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20051"
      },
      {
         "text": "%md\nThis exercise is much more involved, as it requires to first think of a conceptual solution to find whether two words are anagrams of each other, and then figuring out which functions to use to achieve each intermediate step in the computation. Here's a possible solution:",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049338_611420078",
         "id": "20180717-205037_1683333374",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:17+0000",
         "dateFinished": "2018-08-13T20:29:17+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20052"
      },
      {
         "text": "%pyspark\n\ndef anagram_sets(documents, separators_regexp=r'\\s+'):\n    words = to_words(documents, separators_regexp).distinct()\n    anagrams = words.rdd.groupBy(lambda row: tuple(sorted(row.word))) \\\n        .values().map(list) \\\n        .filter(lambda anagrams: len(anagrams) > 1)\n    return anagrams",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:17+0000",
         "config": {
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049338_611420078",
         "id": "20180717-205305_1979437516",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:26+0000",
         "dateFinished": "2018-08-13T20:29:29+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20053"
      },
      {
         "text": "%pyspark\nanagrams = anagram_sets(documents, separators_regexp='\\_?\\W+\\_?')\nanagrams.take(10)",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:18+0000",
         "config": {
            "editorSetting": {
               "language": "python",
               "editOnDblClick": false,
               "completionKey": "TAB",
               "completionSupport": true
            },
            "colWidth": 12,
            "editorMode": "ace/mode/python",
            "fontSize": 9,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049339_611035329",
         "id": "20180717-210544_305761563",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:29+0000",
         "dateFinished": "2018-08-13T20:29:41+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20054"
      },
      {
         "text": "%md\nLet's break it down line by line. The first line: `words = to_words(documents, separators_regexp).distinct()` just gives you back a list of unique words. Simple enough!",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:18+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049339_611035329",
         "id": "20180717-205315_131984777",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:18+0000",
         "dateFinished": "2018-08-13T20:29:18+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20055"
      },
      {
         "text": "%md\nThe following line: `words.rdd.groupBy(lambda word: tuple(sorted(row.word)))` group words as anagrams by proposing a way to figure out whether two words are anagrams of each other-- simply sort their characters and compare the resulting strings!",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:18+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049339_611035329",
         "id": "20180717-210034_442829954",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:18+0000",
         "dateFinished": "2018-08-13T20:29:18+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20056"
      },
      {
         "text": "%md\nIn the third line: `.values().map(list)` we discard the keys of the previous grouping, because we don't really need them anymore. All we care about is the list of values for each group, which happens to be an \"iterable\", hence the need to call `.map(list)`",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:18+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049339_611035329",
         "id": "20180717-210148_280669194",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:18+0000",
         "dateFinished": "2018-08-13T20:29:18+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20057"
      },
      {
         "text": "%md\nFinally, in the last line: `.filter(lambda anagrams: len(anagrams) > 1)` we remove the trivial groups\u2014 those that contain just one element.",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:18+0000",
         "config": {
            "tableHide": false,
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true,
               "completionKey": "TAB",
               "completionSupport": false
            },
            "colWidth": 12,
            "editorMode": "ace/mode/markdown",
            "fontSize": 9,
            "editorHide": true,
            "results": {},
            "enabled": true
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192049340_609111584",
         "id": "20180717-210318_673952657",
         "dateCreated": "2018-08-13T20:27:29+0000",
         "dateStarted": "2018-08-13T20:29:18+0000",
         "dateFinished": "2018-08-13T20:29:18+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20058"
      },
      {
         "text": "%md\n",
         "user": "anonymous",
         "dateUpdated": "2018-08-13T20:29:18+0000",
         "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
               "language": "markdown",
               "editOnDblClick": true
            },
            "editorMode": "ace/mode/markdown"
         },
         "settings": {
            "params": {},
            "forms": {}
         },
         "apps": [],
         "jobName": "paragraph_1534192096567_1327715260",
         "id": "20180813-202816_1484433999",
         "dateCreated": "2018-08-13T20:28:16+0000",
         "status": "FINISHED",
         "errorMessage": "",
         "progressUpdateIntervalMs": 500,
         "$$hashKey": "object:20059"
      }
   ],
   "name": "wordcount-python-exercises-solutions",
   "id": "2DQ5UUGYS",
   "angularObjects": {
      "2DM1XB9DA:shared_process": [],
      "2DPKGH9NF:shared_process": [],
      "2DMW4PJTM:shared_process": [],
      "2DMYE3FW7:shared_process": [],
      "2DN1W9AMT:shared_process": [],
      "2DQA5JUQU:shared_process": [],
      "2DQ484HW1:shared_process": [],
      "2DQ7K4ARC:shared_process": [],
      "2DPJXA53H:shared_process": [],
      "2DMW7H2N2:shared_process": [],
      "2DMPWH2X1:shared_process": [],
      "2DQBTHYT6:shared_process": [],
      "2DQ4JJTWR:shared_process": [],
      "2DQ575U25:shared_process": [],
      "2DM4BTG1Z:shared_process": [],
      "2DPZKUETW:shared_process": [],
      "2DNYW9WR3:shared_process": [],
      "2DQ9UQYP2:shared_process": []
   },
   "config": {
      "looknfeel": "default",
      "personalizedMode": "false"
   },
   "info": {}
}
