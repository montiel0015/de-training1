{
  "paragraphs": [
    {
      "text": "%md\n## Welcome\nWelcome to Wizeline Data Engineering Academy! \n\nWe hope you have a great experience during the course and you end up with a solid grasp of the topics we\u0027ll be covering.\nIf you have any feedback about our courses, please feel free to send us an email to academy@wizeline.com.\n\n## Hello, World! -- Word Count (PySpark Version)\nIn this exercise, your instructor will guide through the creation of an example program to count the number of words in a set of documents using PySpark.\n\nAfterwards, you\u0027ll get a chance to complete a couple of exercises that extend that example and will help you solidify your understanding. \n\nPlease reach out to one of the tutors if you have any questions or run into trouble during the session.\n\nHave Fun!",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:07.449",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eWelcome\u003c/h2\u003e\n\u003cp\u003eWelcome to Wizeline Data Engineering Academy! \u003c/p\u003e\n\u003cp\u003eWe hope you have a great experience during the course and you end up with a solid grasp of the topics we\u0026rsquo;ll be covering.\u003cbr/\u003eIf you have any feedback about our courses, please feel free to send us an email to \u003ca href\u003d\"mailto:\u0026#x61;\u0026#99;\u0026#97;\u0026#100;\u0026#101;\u0026#x6d;\u0026#121;\u0026#64;\u0026#119;\u0026#x69;\u0026#122;\u0026#101;\u0026#x6c;\u0026#105;\u0026#x6e;\u0026#x65;\u0026#x2e;\u0026#x63;\u0026#111;\u0026#x6d;\"\u003e\u0026#x61;\u0026#99;\u0026#97;\u0026#100;\u0026#101;\u0026#x6d;\u0026#121;\u0026#64;\u0026#119;\u0026#x69;\u0026#122;\u0026#101;\u0026#x6c;\u0026#105;\u0026#x6e;\u0026#x65;\u0026#x2e;\u0026#x63;\u0026#111;\u0026#x6d;\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eHello, World! \u0026ndash; Word Count (PySpark Version)\u003c/h2\u003e\n\u003cp\u003eIn this exercise, your instructor will guide through the creation of an example program to count the number of words in a set of documents using PySpark.\u003c/p\u003e\n\u003cp\u003eAfterwards, you\u0026rsquo;ll get a chance to complete a couple of exercises that extend that example and will help you solidify your understanding. \u003c/p\u003e\n\u003cp\u003ePlease reach out to one of the tutors if you have any questions or run into trouble during the session.\u003c/p\u003e\n\u003cp\u003eHave Fun!\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417752_-910766063",
      "id": "20180713-170034_521067052",
      "dateCreated": "2018-07-17 15:30:17.752",
      "dateStarted": "2018-07-17 18:38:07.474",
      "dateFinished": "2018-07-17 18:38:07.488",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n## Reading the dataset\nUnlike the example you saw in Scala, the PySpark version won\u0027t use `Dataset`. The reason is that `Dataset`s are a statically typed data structure, but Python is a dynamically typed language so there is no direct mapping in the APIs between the two. For all of our PySpark examples, we\u0027ll be using `Dataframes` instead.",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:07.572",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eReading the dataset\u003c/h2\u003e\n\u003cp\u003eUnlike the example you saw in Scala, the PySpark version won\u0026rsquo;t use \u003ccode\u003eDataset\u003c/code\u003e. The reason is that \u003ccode\u003eDataset\u003c/code\u003es are a statically typed data structure, but Python is a dynamically typed language so there is no direct mapping in the APIs between the two. For all of our PySpark examples, we\u0026rsquo;ll be using \u003ccode\u003eDataframes\u003c/code\u003e instead.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417756_-704660062",
      "id": "20180713-152515_1970095947",
      "dateCreated": "2018-07-17 15:30:17.756",
      "dateStarted": "2018-07-17 18:38:07.597",
      "dateFinished": "2018-07-17 18:38:07.606",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md To begin our example, let\u0027s pull a text file from a public bucket in Google Cloud:",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:07.695",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eTo begin our example, let\u0026rsquo;s pull a text file from a public bucket in Google Cloud:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417756_-1738002939",
      "id": "20180713-172521_1303216552",
      "dateCreated": "2018-07-17 15:30:17.756",
      "dateStarted": "2018-07-17 18:38:07.720",
      "dateFinished": "2018-07-17 18:38:07.726",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport requests\n\ndef read_text_from_url(url):\n    content \u003d requests.get(url)\n    # We\u0027ll be creating a `Dataframe` from this content, and `createDataFrame` expects tuples\n    return (content.text,)\n\nurls \u003d [\u0027https://storage.googleapis.com/wize-datasets/big.txt\u0027]\ntexts \u003d sc.parallelize(urls).map(read_text_from_url)\ndocuments \u003d spark.createDataFrame(texts, [\u0027document\u0027])",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 20:06:39.938",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            "http://172.17.0.2:4040/jobs/job?id\u003d0"
          ],
          "interpreterSettingId": "spark"
        }
      },
      "apps": [],
      "jobName": "paragraph_1531841417757_22921299",
      "id": "20180713-152523_768975449",
      "dateCreated": "2018-07-17 15:30:17.757",
      "dateStarted": "2018-07-17 20:06:40.388",
      "dateFinished": "2018-07-17 20:06:59.682",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md In this example, we will use only one document, but in practice you could extend this to use any number of documents in all sorts of formats, even if they couldn\u0027t fit in a single machine. That\u0027s the power of Spark!",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:10.863",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eIn this example, we will use only one document, but in practice you could extend this to use any number of documents in all sorts of formats, even if they couldn\u0026rsquo;t fit in a single machine. That\u0026rsquo;s the power of Spark!\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417757_-1390778175",
      "id": "20180713-173145_1979252085",
      "dateCreated": "2018-07-17 15:30:17.757",
      "dateStarted": "2018-07-17 18:38:10.890",
      "dateFinished": "2018-07-17 18:38:10.901",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Converting documents to words\nThough it\u0027s not completely necessary to define a separate function to break the input documents into words, we\u0027ll define a function `to_words` that will come in handy once we get to other exercises.\n\nThe function allows you to customize the boundaries between words using a regular expression. By default, it uses whitespaces as the delimiter. It also removes any empty words (e.g. for the text `\"hello,,world\"` and a separator that includes whitespace and commas, it would produce `\"hello\"` and `\"world\"` only)",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:10.988",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eConverting documents to words\u003c/h2\u003e\n\u003cp\u003eThough it\u0026rsquo;s not completely necessary to define a separate function to break the input documents into words, we\u0026rsquo;ll define a function \u003ccode\u003eto_words\u003c/code\u003e that will come in handy once we get to other exercises.\u003c/p\u003e\n\u003cp\u003eThe function allows you to customize the boundaries between words using a regular expression. By default, it uses whitespaces as the delimiter. It also removes any empty words (e.g. for the text \u003ccode\u003e\u0026quot;hello,,world\u0026quot;\u003c/code\u003e and a separator that includes whitespace and commas, it would produce \u003ccode\u003e\u0026quot;hello\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;world\u0026quot;\u003c/code\u003e only)\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417757_-688698304",
      "id": "20180713-185000_1281997520",
      "dateCreated": "2018-07-17 15:30:17.757",
      "dateStarted": "2018-07-17 18:38:11.019",
      "dateFinished": "2018-07-17 18:38:11.031",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport re\ndef to_words(documents, separators_regexp\u003dr\u0027\\s+\u0027):\n    # We need to make an intermediate conversion to `RDDs` because `Dataframe`s don\u0027t support `flatMap` directly\n    words \u003d documents.select(\u0027document\u0027).rdd.flatMap(\n        # `(word.lower(), )` is because `Dataframe`s expect tuples\n        lambda row: [(word.lower(),) for word in re.split(separators_regexp, row.document) if len(word) \u003e 0])\n    return words.toDF([\"word\"])",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 20:07:45.240",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1531841417757_1850535997",
      "id": "20180713-162106_300537953",
      "dateCreated": "2018-07-17 15:30:17.757",
      "dateStarted": "2018-07-17 20:07:45.325",
      "dateFinished": "2018-07-17 20:07:45.334",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md Given that we\u0027re mostly interested in words without punctuation in this example, we\u0027ll use a more specific regular expression. Don\u0027t worry too much about the details, though. If you\u0027re curious about how exactly it works, you can check the documentation [here](https://docs.python.org/2/library/re.html)",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:11.237",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eGiven that we\u0026rsquo;re mostly interested in words without punctuation in this example, we\u0026rsquo;ll use a more specific regular expression. Don\u0026rsquo;t worry too much about the details, though. If you\u0026rsquo;re curious about how exactly it works, you can check the documentation \u003ca href\u003d\"https://docs.python.org/2/library/re.html\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417758_-1511141683",
      "id": "20180713-193952_1952995095",
      "dateCreated": "2018-07-17 15:30:17.758",
      "dateStarted": "2018-07-17 18:38:11.264",
      "dateFinished": "2018-07-17 18:38:11.277",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\npunctuation_regexp \u003d r\u0027\\W+\u0027",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 20:29:41.119",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1531841417758_1283138794",
      "id": "20180713-194312_424075201",
      "dateCreated": "2018-07-17 15:30:17.758",
      "dateStarted": "2018-07-17 20:29:41.157",
      "dateFinished": "2018-07-17 20:29:41.169",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Incremental Development and Exploration\nThough it\u0027s convenient to have a function to reuse, when we\u0027re developing code for the first time it\u0027s usually a good idea to try individual function calls in isolation to make sure the data is flowing as expected.\n\nLet\u0027s go ahead and try a couple of those functions in isolation:",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:11.485",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eIncremental Development and Exploration\u003c/h3\u003e\n\u003cp\u003eThough it\u0026rsquo;s convenient to have a function to reuse, when we\u0026rsquo;re developing code for the first time it\u0026rsquo;s usually a good idea to try individual function calls in isolation to make sure the data is flowing as expected.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s go ahead and try a couple of those functions in isolation:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417758_-2114892314",
      "id": "20180713-190730_1897522264",
      "dateCreated": "2018-07-17 15:30:17.758",
      "dateStarted": "2018-07-17 18:38:11.514",
      "dateFinished": "2018-07-17 18:38:11.524",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nlowercased_documents \u003d documents.select(\u0027document\u0027).rdd.map(\n    lambda row: row[\u0027document\u0027].lower())\ndocument \u003d lowercased_documents.take(1)[0]\ndocument[:50]",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:11.612",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "u\u0027the project gutenberg ebook of the adventures of s\u0027\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417758_75793174",
      "id": "20180713-191055_175413413",
      "dateCreated": "2018-07-17 15:30:17.758",
      "dateStarted": "2018-07-17 18:38:11.638",
      "dateFinished": "2018-07-17 18:38:14.232",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nreduced_documents \u003d documents.select(\u0027document\u0027).rdd.map(\n    lambda row: [word for word in re.split(punctuation_regexp, row[\u0027document\u0027]) if len(word) \u003c 5])\nwords_per_document \u003d reduced_documents.take(1)[0]\nwords_per_document[:50]",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:14.252",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[u\u0027The\u0027, u\u0027of\u0027, u\u0027The\u0027, u\u0027of\u0027, u\u0027by\u0027, u\u0027Sir\u0027, u\u002715\u0027, u\u0027in\u0027, u\u0027our\u0027, u\u0027by\u0027, u\u0027Sir\u0027, u\u0027laws\u0027, u\u0027are\u0027, u\u0027all\u0027, u\u0027over\u0027, u\u0027the\u0027, u\u0027Be\u0027, u\u0027sure\u0027, u\u0027to\u0027, u\u0027the\u0027, u\u0027laws\u0027, u\u0027for\u0027, u\u0027your\u0027, u\u0027or\u0027, u\u0027this\u0027, u\u0027or\u0027, u\u0027any\u0027, u\u0027This\u0027, u\u0027be\u0027, u\u0027the\u0027, u\u0027seen\u0027, u\u0027when\u0027, u\u0027this\u0027, u\u0027file\u0027, u\u0027do\u0027, u\u0027not\u0027, u\u0027it\u0027, u\u0027Do\u0027, u\u0027not\u0027, u\u0027or\u0027, u\u0027edit\u0027, u\u0027the\u0027, u\u0027read\u0027, u\u0027the\u0027, u\u0027and\u0027, u\u0027the\u0027, u\u0027and\u0027, u\u0027at\u0027, u\u0027the\u0027, u\u0027of\u0027]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417759_2100988088",
      "id": "20180713-191334_296049631",
      "dateCreated": "2018-07-17 15:30:17.759",
      "dateStarted": "2018-07-17 18:38:14.284",
      "dateFinished": "2018-07-17 18:38:17.458",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md Let\u0027s also make sure that our function `to_words` produces the expected output (i.e. a set of words):",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:17.504",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLet\u0026rsquo;s also make sure that our function \u003ccode\u003eto_words\u003c/code\u003e produces the expected output (i.e. a set of words):\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417759_253795621",
      "id": "20180713-192314_2145515679",
      "dateCreated": "2018-07-17 15:30:17.759",
      "dateStarted": "2018-07-17 18:38:17.530",
      "dateFinished": "2018-07-17 18:38:17.546",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nwords \u003d to_words(documents)\nwords.take(30)",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:50:24.173",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[Row(word\u003du\u0027the\u0027), Row(word\u003du\u0027project\u0027), Row(word\u003du\u0027gutenberg\u0027), Row(word\u003du\u0027ebook\u0027), Row(word\u003du\u0027of\u0027), Row(word\u003du\u0027the\u0027), Row(word\u003du\u0027adventures\u0027), Row(word\u003du\u0027of\u0027), Row(word\u003du\u0027sherlock\u0027), Row(word\u003du\u0027holmes\u0027), Row(word\u003du\u0027by\u0027), Row(word\u003du\u0027sir\u0027), Row(word\u003du\u0027arthur\u0027), Row(word\u003du\u0027conan\u0027), Row(word\u003du\u0027doyle\u0027), Row(word\u003du\u0027(#15\u0027), Row(word\u003du\u0027in\u0027), Row(word\u003du\u0027our\u0027), Row(word\u003du\u0027series\u0027), Row(word\u003du\u0027by\u0027), Row(word\u003du\u0027sir\u0027), Row(word\u003du\u0027arthur\u0027), Row(word\u003du\u0027conan\u0027), Row(word\u003du\u0027doyle)\u0027), Row(word\u003du\u0027copyright\u0027), Row(word\u003du\u0027laws\u0027), Row(word\u003du\u0027are\u0027), Row(word\u003du\u0027changing\u0027), Row(word\u003du\u0027all\u0027), Row(word\u003du\u0027over\u0027)]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417759_-53790018",
      "id": "20180713-192337_1741363054",
      "dateCreated": "2018-07-17 15:30:17.759",
      "dateStarted": "2018-07-17 18:50:24.200",
      "dateFinished": "2018-07-17 18:50:30.195",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nFeel free to try and experiment with all sorts of expressions until you feel comfortable with your understanding of how the data is being transformed and flowing from function to function.",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:25.129",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eFeel free to try and experiment with all sorts of expressions until you feel comfortable with your understanding of how the data is being transformed and flowing from function to function.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417759_1294302299",
      "id": "20180713-191737_182562044",
      "dateCreated": "2018-07-17 15:30:17.759",
      "dateStarted": "2018-07-17 18:38:25.187",
      "dateFinished": "2018-07-17 18:38:25.206",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Counting Words\nLet\u0027s now move on to solving the problem we started with! With the `to_words` function in our hands, our `count_words` function should be pretty short:",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:25.283",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCounting Words\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s now move on to solving the problem we started with! With the \u003ccode\u003eto_words\u003c/code\u003e function in our hands, our \u003ccode\u003ecount_words\u003c/code\u003e function should be pretty short:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417760_1658582751",
      "id": "20180713-192012_688996853",
      "dateCreated": "2018-07-17 15:30:17.760",
      "dateStarted": "2018-07-17 18:38:25.308",
      "dateFinished": "2018-07-17 18:38:25.315",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndef count_words(documents, separators_regexp\u003dr\u0027\\s+\u0027):\n    words \u003d to_words(documents, separators_regexp)\n    counts \u003d words.groupBy(\"word\").count()\n    return counts",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:50:41.453",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1531841417760_-1441630144",
      "id": "20180713-165608_638775812",
      "dateCreated": "2018-07-17 15:30:17.760",
      "dateStarted": "2018-07-17 18:50:41.490",
      "dateFinished": "2018-07-17 18:50:41.497",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md Let\u0027s test it (if you need a refresher of what\u0027s going on with the `groupBy` and `count` functions, please refer to the slides shown earlier in this session):",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:25.530",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLet\u0026rsquo;s test it (if you need a refresher of what\u0026rsquo;s going on with the \u003ccode\u003egroupBy\u003c/code\u003e and \u003ccode\u003ecount\u003c/code\u003e functions, please refer to the slides shown earlier in this session):\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417760_2029761832",
      "id": "20180713-192508_1130563054",
      "dateCreated": "2018-07-17 15:30:17.760",
      "dateStarted": "2018-07-17 18:38:25.556",
      "dateFinished": "2018-07-17 18:38:25.561",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ncounts \u003d count_words(documents, punctuation_regexp)\ncounts.show()",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:50:47.205",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------------+-----+\n|        word|count|\n+------------+-----+\n|       still|  922|\n|       those| 1201|\n|        some| 1536|\n|         few|  458|\n|      doubts|   39|\n|       inner|   60|\n|        hope|  149|\n|    everyday|   14|\n|   connected|   52|\n| requirement|    3|\n|     flashed|   17|\n|      travel|   29|\n|  concluding|    3|\n|         fog|   23|\n|      spared|   12|\n|         art|   47|\n|accumulation|   25|\n|      waters|   30|\n|      poetry|   10|\n|    whishing|    1|\n+------------+-----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417760_-1726309624",
      "id": "20180713-165720_1184054894",
      "dateCreated": "2018-07-17 15:30:17.760",
      "dateStarted": "2018-07-17 18:50:47.230",
      "dateFinished": "2018-07-17 18:50:56.055",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md It works! Yay!",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:36.539",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eIt works! Yay!\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417761_1273619803",
      "id": "20180713-194553_145958858",
      "dateCreated": "2018-07-17 15:30:17.761",
      "dateStarted": "2018-07-17 18:38:36.566",
      "dateFinished": "2018-07-17 18:38:36.902",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Exercises\nNow that you\u0027re comfortable with this example, try solving the following exercises to further improve your understanding:\n\n1. Which are the top 10 longest words and how many of each are there in the dataset?\n2. Can you find all interesting sets of anagrams (i.e. those of at least two words)?\n    Two words are anagrams of each other if they contain the same number of occurrences of each letter. For instance, `“mar”.isAnagram(“ram”) \u003d\u003d true`, but `“line”.isAnagram(“nilee”) \u003d\u003d false`\n    For the set `{“art”, “rat”, “car”, “arc”}`, there are two interesting sets: `{“art”, “rat”}` and `{“car”, “arc”}` because they contain at least two elements. The set `{“buck”, “knuck”}` has no interesting sets of anagrams.\n\nIf you get stuck, don\u0027t hesitate to reach out to one of the tutors. They\u0027re here to help you!",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 20:50:24.097",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eExercises\u003c/h2\u003e\n\u003cp\u003eNow that you\u0026rsquo;re comfortable with this example, try solving the following exercises to further improve your understanding:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003eWhich are the top 10 longest words and how many of each are there in the dataset?\u003c/li\u003e\n  \u003cli\u003eCan you find all interesting sets of anagrams (i.e. those of at least two words)?\u003cbr/\u003eTwo words are anagrams of each other if they contain the same number of occurrences of each letter. For instance, \u003ccode\u003e“mar”.isAnagram(“ram”) \u003d\u003d true\u003c/code\u003e, but \u003ccode\u003e“line”.isAnagram(“nilee”) \u003d\u003d false\u003c/code\u003e\u003cbr/\u003eFor the set \u003ccode\u003e{“art”, “rat”, “car”, “arc”}\u003c/code\u003e, there are two interesting sets: \u003ccode\u003e{“art”, “rat”}\u003c/code\u003e and \u003ccode\u003e{“car”, “arc”}\u003c/code\u003e because they contain at least two elements. The set \u003ccode\u003e{“buck”, “knuck”}\u003c/code\u003e has no interesting sets of anagrams.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf you get stuck, don\u0026rsquo;t hesitate to reach out to one of the tutors. They\u0026rsquo;re here to help you!\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417761_1201052435",
      "id": "20180713-165752_2126024409",
      "dateCreated": "2018-07-17 15:30:17.761",
      "dateStarted": "2018-07-17 20:50:24.105",
      "dateFinished": "2018-07-17 20:50:24.117",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Homework\nTo be designed...",
      "user": "anonymous",
      "dateUpdated": "2018-07-17 18:38:37.097",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eHomework\u003c/h2\u003e\n\u003cp\u003eTo be designed\u0026hellip;\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1531841417761_542431160",
      "id": "20180716-214705_141895454",
      "dateCreated": "2018-07-17 15:30:17.761",
      "dateStarted": "2018-07-17 18:38:37.123",
      "dateFinished": "2018-07-17 18:38:37.129",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "WordCount PySpark",
  "id": "2DMSSRH67",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}